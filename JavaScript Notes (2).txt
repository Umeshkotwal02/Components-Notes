1. # ------ Ternary Operator ----------- #
syntax: condition ? exp1 : exp2

example: let age  = parseInt(prompt("Enter Your Age"));
                    let res = age>=18 ? ('You can Vote'):('You Can Not Vote');
                    console.log(res); 

2. # --- Arrow Function ------- #
syntax: variable_name function_name = (parameter) => return statement or fun.. body..
        let myFunction = (a,b) => a * b
    // normal fun
        function sum(a, b) {
            return a + b;
        }
        console.log(sum(2,3))
    // Arrow function
       (1). const summ = (a,b) =>{



            return a + b ; }
          : console.log(summ(7,7)); 

       // single line fun => after is return statement
       (2). const isEven = (num) => num % 2 === 0 ; 
          : console.log(isEven(2));

       (3) const isOdd = (num) => {
           return num % 2 !== 0;
           }
           console.log(isOdd(5));

3. # ---- Template literal --------- #
- we write template literal with backtick.
- ${var_nm}
- to access variable value ` in string use ${variable_name} with ` backtick to `string`
 :- let about_me = `my name is ${fname} & my age is ${age}` 

// normal string
- we write + to add variable
- example: 
    let fname = 'Umesh'
    let age = '22'
    let about_me = "my name is " + fname + " & my age is " + age;
    console.log(about_me);

// template literal
   let about_me = `my name is ${fname} & my age is ${age}` 
   
4. # ---------- String Method --------- #
    let string = 'Umesh';
  - name.slice(2,4) index start with 0 at last index not include
  - name.slice(1) with given index to all string (index) give in output.
  - name.split("") : depend on space means convert string to array by space
                   : let nm = 'umesh kotwal'
                   : console.log("")  //output:['U', 'm', 'e', 's', 'h', ' ', 'k', 'o', 't', 'w', 'a', 'l']
                   : console.log(" ") //output:['Umesh', 'kotwal']
                   : console.log("give with string " + "U,m,e,s,h"); // output: give with string U,m,e,s,h
  - name.reverse() : console.log(string.split("").reverse().join(""));
  - name.includes(): console.log(string.includes('kotwal')); // output: true

5. # ------- Array Method ---------- #
   - we access array with index[i].
   - array length start with 1 & index start with 0
   - to Access All array 
   - let arr = [2,3,5,6,8,5,6,2]
     for(let i=1;i<arr.length;i++){
        console.log(arr[i]);   
     }
   - arr.push(element) : add element at last in array & return length of array
   - arr.pop() : remove last element of array return that remove element
   - arr.sort(): sort is sort the array by alphabetically so if array is number its to alphabetically like: 1,2,22,25,31,35,78
   - arr.sort(compare) : compare the array increment compare is define function we can not change compare.
                       : let compare = (a,b) => a -b 
                       : let num = [551, 22,55, 34, 3, 14, 5, 6, 7, 8, 229]
                       : console.log(num.sort(compare));   //OutPut: 3, 5, 6, 7, 8, 14, 22, 229, 551
   - arr.splice() : add/remove element from given array & return deleted array
                  : num.splice(indexof_start_1 , want_to_delete_element_number_2, want_to_add_that_all_element_3);
                  : let arr3=['umesh','lalu','akshay']
                    const res = arr3.splice(1,2,"rohit",'chetan')
                    console.log(res);
                    console.log(arr3);
  - For Each loop : perform particular(same) operation for each element.
                  : const num = [2, 3, 4, 5, 6, 7, 8, 9, 77];
                    let sum = num.forEach((element) => {
                        console.log(element*element);
                    }
                    )
  - For of loop : access full array easily Most Used
                : let arr = [1,2,3,4,5,6,7]
                    for(let i of num){
                         console.log(num);  
                        }
  - Array.from   : String,Object to convert

6. # --------- map(), filter(), reduce(), find(),sort(), newMap(), every(), some(), set() ---------------- #
- this all is array methods arry.map() etc....:
- ##  map()
- create new array by performing some operation on each element like forEach loop, return new array.
- map() can not modify original array, always return new array.
- Example:  let num = [1,2,3,4]
            let mul = num.map((item)=>{
                return item * 2;
            });
            console.log(mul);  // OutPut : [2,4,6,8]
- we write function inside map() at upper example we used arrow function
- Example:-
        // Normal Example
            let num = [1, 2, 3, 4]
            function square(a) {
            return a * a
            }

            let num2 = num.map(square)
            console.log(num2);

        // with Index
        const numbers = [10, 20, 30];
        const modified = numbers.map((num, index) => num * index);
        console.log(modified); // Output: [0, 20, 60]

         // with Object ---
         const users = [
            { firstName: 'umesh', lastName: 'Kotwal',age: 22 },
            { firstName: 'Akshay', lastName: 'Badgujar',age: 20 },
        ]; 
          const fulldetails = users.map((users)=>{
            return `User full name is ${users.firstName.toUpperCase()} ${users.lastName.toUpperCase()} and age is ${users.age}`
          })
          console.log(fulldetails);


- ## filter()
- create new array
- filter a array with values that passes the test and create a new array.
- filter function return true or false value.
- Example:  // Normal Example
-           let num = [1,2,3,4,5,6]
            const arr = num.filter((num)=>{
                return num % 2 == 0;
            })
            console.log(arr);

            // Object by Properties
            const users = [
                            { name: 'John', age: 25 },
                            { name: 'Jane', age: 30 },
                            { name: 'Bob', age: 20 }
                          ];
            const adults = users.filter(user => user.age >= 21);
            console.log(adults); // Output: [{ name: 'John', age: 25 }, { name: 'Jane', age: 30 }]

            // Filtering String
            const fruits = ['apple', 'banana', 'cherry', 'date', 'fig', 'grape'];
            const longFruits = fruits.filter(fruit => fruit.length > 5);
            console.log(longFruits); // Output: ['banana', 'cherry']

            // separate from array by filter 
            const fruits = ['apple', 'banana', 'orange', 'apple', 'orange', 'banana', 'apple'];
            const res=fruits.filter((fruit,index)=>{
                return fruits.indexOf(fruit) === index;
                })
                console.log(res);



- ## reduce()
- reduce the array to a single value.
- It reduces all the elements of the array to a single value by repeatedly applying a function.
- syntax: 
        array.reduce(callback(accumulator, currentValue, index, array), initialValue);
- we can set accumulator value as initialValue

// Example 
   // Normal Array : Sum of Array
    const arr = [1,2,3,4,5]
    const res = arr.reduce((accumulator,currentvalue)=>{
        return accumulator + currentvalue
    },0)
    console.log(res);

  // Object 
    const userCart = [{ productId: 1, productName: "mobile", price: 12000 },
                  { productId: 2, productName: "laptop", price: 22000 },
                  { productId: 3, productName: "tv", price: 15000 }]

    const Cart = userCart.reduce((a1,currentValue)=>{
        return a1 + currentValue.price;
    },0);
    console.log(Cart);

// nested array
    const nestedArray = [[1, 2], [3, 4], [5, 6]];

    const flatArray = nestedArray.reduce((accumulator, currentValue) => {
        return accumulator.concat(currentValue);
    }, []);

    console.log(flatArray); // Output: [1, 2, 3, 4, 5, 6]
// Count common value
    const fruits = ['apple', 'banana', 'orange', 'apple', 'orange', 'banana', 'apple'];
    const count = fruits.reduce((accumulator, fruit) => {
        accumulator[fruit] = (accumulator[fruit] || 0) + 1;
        return accumulator;
    }, {});

    console.log(count); // Output: { apple: 3, banana: 2, orange: 2 }

- ## find()
- find method is used for find some this in array.
- const users = [ { userId: 1, userName: "harshit" },
                { userId: 2, userName: "harsh" },
                { userId: 3, userName: "nitish" },
                { userId: 4, userName: "mohit" },
                { userId: 5, userName: "aaditya" }];

const finduser = users.find((user)=>user.userId=3);
console.log(finduser);

- ## sort(compare)
- sort array by low to high
-Ex:  const products = [ {productId: 1, produceName: "p1", price: 300 }, 
        {productId: 2, produceName: "p2", price: 3000}, 
        {productId: 3, produceName: "p3", price: 200 }, 
        {productId: 4, produceName: "p4", price: 8000}, 
        {productId: 5, produceName: "p5", price: 500} ]

        const lowtohigh = products.sort((a,b)=>a.price-b.price)
        console.log(lowtohigh);
- ## every()
- to check every in array like check every product price is less than 10000
-    const lowtohigh = products.every((a)=>a.price <= 10000)
     console.log(lowtohigh);

- ## some() - check some in array any product price less than 5000
- ## new Map() - for add object extra info 
-   const person1 = { id: 1, firstName: "harshit" };
    const extraInfo = new Map();
    extraInfo.set(person1, { age: 18, gender: "male" }); // Correct syntax for an object
    console.log(person1.id); // Output: 1
    console.log(extraInfo.get(person1)); // Output: { age: 18, gender: "male" }
    console.log(extraInfo.get(person1).gender); // Output: "male"

7. # ------------ Prototypes ----------------- #
- Only function provide prototype property.
- using prototype we can add extra information in function.
- function hello() {
    console.log('hello world');
}

// Adding properties and methods to the 'hello' function's prototype
hello.prototype.abc = "abc";   // Adding a property 'abc'
hello.prototype.xyz = "xyz";   // Adding a property 'xyz'
hello.prototype.sing = function () {   // Adding a method 'sing'
    return "lalalla";
};

console.log(hello.prototype.sing());  // Calling the 'sing' method
// output : lalalla


8. # ------------ DOM ------------------ #
- querySelector: it's select only single value in html
               : we write (.classname) for class & (#id) for id
       Example :  <ul id="ul1">
                    <li class="list"> list 1 </li>
                    <li class="list"> list 2 </li>
                    <li class="list"> list 2 </li>
                 </ul>
                let res = document.querySelector(".list");
                res.style.color = "red";   // it's apply only one class

- querySelectorAll : it's select all value of giving in html
                   : apply on all same name class in program

                    let res1 = document.querySelectorAll(".list");
                    console.log(res1); // we get NodeList if we want apply style use forEach loop
                    res1.forEach(function(element){
                        element.style.color='blue'
                    })
- innerHTML : get & set content of html.
            : they return value as String
            : we set value as string
              <span id="first"> HEllo get innerHTML </span>
                <script>
                console.log(first.innerHTML)
                console.log(first.innerHTML = "Set New innerHTML")
              </script>
- outerHTML :  
            <span id="first"> HEllo get innerHTML </span>
                <script>
                console.log(first.outerHTML)
                console.log(first.outerHTML = "<div>hey</div>")   
            </script>
- textContent : 
            - console.log(document.body.textContent)
            - provide access to text inside the element: only show text, mins all tag
            - can access all website as text.
- hidden :  <div class="content" hidden>This is the body content.</div>
         :  this property is hide that content we use hidden.\

9. # ------------ Event -------------- #
- Mouse Event :
    onClick
    ondblClick
    onSelect
    onMouseOver & onMouseOut
    onMouseUp
    onMouseDown

-  Keyboard Event :
    onKeyDown
    onKeyUp
    onKeyPress

-  Form Event :
    onSubmit
    onFocus
    onReset

## - addEventListener
   : Event listener is used for add Event or Remove Event.
 Ex: document.getElementById("b1").addEventListener("click", onclick);
   : click is event and onclick is handleClick

 Example: 
     useEffect(() => {
     window.addEventListener("keydown", handleKeyPress);
     return () => {
      window.removeEventListener("keydown", handleKeyPress);
     };
     }, [input]);

## - removeEventListener
    function removeHandler() {
      myDiv.removeEventListener("mousemove", myFunction);
    } 

10. # --------- Promises ------------ #
- Promise will resolve or reject means promise fulfilled.
:   let promise1 = new Promise((resolve,reject)=> {
        console.log('Jit Gaye');
        resolve('Yehh')
      //reject ("Error") // if reject promise give this error
    });
    console.log(promise1);
- .then() % .catch()
    : let p1 = new Promise(function(fetch,reject){
            fetch('https://fakestoreapi.com/products')
        })
        p1.then(()=>{
        console.log("we fetch api"); 
        }).catch(()=>{
            console.log('api not fetch');
        })

- Fetch :
- fetch always return promise so we did not define fetch in side promise
- fetch is used to fetch data from API
- to print data from fetch we use 'JSON'
- Example : 
        let p1 = fetch('https://fakestoreapi.com/products');
        p1.then(res => res.json())
        .then(json => console.log(json))
        .catch((error)=>console.log("we can not fetch data",error))

11. # ------------ Async & Await ---------------------- #
- we can make any function async & after we await promise inside function.
- async always return promise
- like in fetch we use .then 2 time same use await
// Normal Example:
async function users() {
    let response = await fetch("https://fakestoreapi.com/users/1")
    let data = await response.json()
    console.log(data);
}
users()



12. # ------------ Error Handling ---------------- #
- Error are handle by using try(), catch(), throw(), finally() 
- try..catch.. work synchronously
- if expression happens in scheduled code, like setTimeout, then try catch would not catch it and get Error. 
- throw :
- The throw statement lets you make your own errors.
- throw new Error("Network response is not ok")
- finally :
- The finally statement lets you execute code after try and catch.  
- The finally block runs regardless of the result of the try-catch block.

- Example: 
    const users = async () => {
        try {
            let response = await fetch("https://fakestoreapi.com/users/5");
            if (!response.ok) {
                throw new Error("Network response is not ok");  // This will trigger if response is not 200-299
            }
            let data = await response.json();
            console.log(data);
        } catch (error) {
            console.error("Error:", error);  // This will log the error
        }
    };
    users();


13. # ----------- local Storage ---------------- #
- local storage is web Storage object which are not sent to server with each request.
- allows you to store key-value pairs in a browser
- this data no go any where if we refresh page or close & restart browser.
- Example :
        let key = prompt("Enter Key Value")
        let value = prompt("Enter  Value")
        localStorage.setItem(key,value)
        console.log(`the value of ${key} is ${localStorage.getItem(key)}`)
- Method : 
    setItem(key, value)  -	Stores key/value pair
    getItem(key)	     -  Returns the value in front of the key
    key(index)	         -  Gets the key at a given index
    length	             - Returns the number of stored items (data)
    removeItem(key)	     - Removes the given key with its value
    clear()	             - Deletes everything from the storage

- Example :-
        let key = prompt("Enter Key Value")
        let value = prompt("Enter  Value")
        localStorage.setItem(key,value)
        console.log(localStorage.getItem(key))
        console.log(localStorage.key(1));
        localStorage.valueOf(1)
        localStorage.clear()
- Important Note:
- 1. Both key & value must be in String.
- 2. We can use the two json method to store object in localStorage.
      : JSON.stringify(object)  - convert objects to JSON string
      : JSON.parse(string)      - convert string to object (must be valid json)

// Storing Data
const myObj = { name: "John", age: 31, city: "New York" };
const myJSON = JSON.stringify(myObj); // convert into string 
console.log(localStorage.setItem("testJSON", myJSON));  // then store into local Storage

// Retrieving Data:
let text = localStorage.getItem("testJSON");
let obj = JSON.parse(text);  // the key value convert into string to object || (parse text) to access the object property
console.log(obj.name);

14. # ------------- Session Storage & Storage Event --------------- #
- the Session storage exist only within the current browser tab another tab with same page will hover different storage.
- data service page refresh but not page closing, opening the tab.
- Session Storage methods are same like localStorage
-  : sessionStorage.setItem('name','Akshay')
   : sessionStorage.getItem(key)
- Storage Event 
- when data get update in localStorage or sessionStorage, store event trigger a property.
- window.onstorage = (e) =>{
    alert("changed")
}